# -*- coding: utf-8 -*-
"""Untitled24.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FE_lp2WcfLX7fH_TyWl73BAd_Zv4QKqc
"""

import pandas as pd
from imblearn.over_sampling import SMOTE
from sklearn.model_selection import train_test_split

# Read the dataset
df = pd.read_csv('scaled_X_features.csv')

# Separate the features (X) and target variable (y)
X = df.drop('learning_style', axis=1)
y = df['learning_style']


# Create an instance of the SMOTE class
smote = SMOTE()

# Apply SMOTE on the entire dataset
X_resampled, y_resampled = smote.fit_resample(X, y)

# Split the data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)



# Print the balanced class distribution
print('Original class distribution:', y.value_counts())
print('Resampled class distribution:', y_resampled.value_counts())

from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import GridSearchCV
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split



# Create a decision tree classifier
classifier = DecisionTreeClassifier()

# Define the parameter grid for hyperparameter tuning
param_grid = {
    'criterion': ['gini', 'entropy'],
    'max_depth': [None, 5, 10, 15],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4],
    'max_features': [None,'auto', 'sqrt', 'log2'],
    'class_weight': [None, 'balanced']
}


# Perform grid search with cross-validation
grid_search = GridSearchCV(estimator=classifier, param_grid=param_grid, cv=5)
grid_search.fit(X_train, y_train)

# Print the best hyperparameters and corresponding score
print("Best Hyperparameters: ", grid_search.best_params_)
print("Best Score: ", grid_search.best_score_)

# Evaluate the model with best hyperparameters on the test set
best_classifier = grid_search.best_estimator_
accuracy = best_classifier.score(X_test, y_test)
print("Test Accuracy: ", accuracy)

from sklearn.tree import DecisionTreeClassifier
classifier1 = DecisionTreeClassifier(class_weight= None, criterion= 'entropy', max_depth= None, max_features= 'sqrt', min_samples_leaf= 1, min_samples_split= 2)
classifier1.fit(X_train, y_train)
y_pred1 = classifier1.predict(X_test)

from sklearn.metrics import confusion_matrix, accuracy_score
cm1 = confusion_matrix(y_test, y_pred1)
print(cm1)
accuracy_score(y_test, y_pred1)

from sklearn.metrics import accuracy_score, confusion_matrix, ConfusionMatrixDisplay, f1_score

model = DecisionTreeClassifier(class_weight= None, criterion= 'entropy', max_depth= None, max_features= 'sqrt', min_samples_leaf= 1, min_samples_split= 2)
model.fit(X_train, y_train)
pred_dt=model.predict(X_test)
score_dt=accuracy_score(y_test,pred_dt)
f1_dt = f1_score(pred_dt, y_test, average="weighted")

print('Accuracy of DT',score_dt)
print('F1 score of DT',f1_dt)
print("\n")

cm = confusion_matrix(y_test, pred_dt, labels=model.classes_)
disp = ConfusionMatrixDisplay(confusion_matrix=cm,display_labels=model.classes_)
disp.plot()

from sklearn.metrics import classification_report

# Assuming you have predicted labels stored in `y_pred` and true labels stored in `y_true`
print(classification_report(y_test, pred_dt, zero_division=0))

import matplotlib.pyplot as plt
import numpy as np
from sklearn.tree import DecisionTreeClassifier

# Create and train a decision tree classifier
tree_clf = DecisionTreeClassifier(class_weight= None, criterion= 'entropy', max_depth= None, max_features= 'sqrt', min_samples_leaf= 1, min_samples_split= 2)
tree_clf.fit(X_train, y_train)

# Get the feature importances
importance = tree_clf.feature_importances_

# Sort the feature importances in descending order
indices = np.argsort(importance)[::-1]

# Arrange the feature names in the same order
feature_names = X.columns[indices]

# Plot the feature importances
plt.figure(figsize=(10, 6))
plt.bar(range(X.shape[1]), importance[indices])
plt.xticks(range(X.shape[1]), feature_names, rotation=90)
plt.xlabel('Features')
plt.ylabel('Importance')
plt.title('Feature Importance')
plt.show()

from sklearn.model_selection import cross_val_score




model = DecisionTreeClassifier(class_weight= None, criterion= 'entropy', max_depth= None, max_features= 'sqrt', min_samples_leaf= 1, min_samples_split= 2)


# Perform cross-validation
cv_scores = cross_val_score(model, X_train, y_train, cv=5)

# Print the accuracy scores for each fold
print("Cross-validation scores:", cv_scores)

# Compute the mean accuracy across all folds
mean_accuracy = cv_scores.mean()
print("Mean accuracy:", mean_accuracy)

print("Accuracy: {:.2f} %".format(cv_scores.mean()*100))
print("Standard Deviation: {:.2f} %".format(cv_scores.std()*100))